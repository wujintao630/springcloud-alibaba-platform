package ${package.Controller};

import ${package.Entity}.${entity};
import ${package.Service}.${table.serviceName};
import com.tonytaotao.service.common.base.GlobalResult;
import com.tonytaotao.service.common.base.QueryPage;

import com.baomidou.mybatisplus.mapper.EntityWrapper;
import com.baomidou.mybatisplus.plugins.Page;

import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;

import java.util.List;

#if(${restControllerStyle})
import lombok.extern.slf4j.Slf4j;
import org.springframework.web.bind.annotation.RestController;
#else
import org.springframework.stereotype.Controller;
#end
#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.beans.factory.annotation.Autowired;

/**
* <p>
*     $!{table.comment} 前端控制器
* </p>
 *
 * @author ${author}
 * @since ${date}
*/
#if(${restControllerStyle})
@RestController
#else
@Controller
#end
@RequestMapping("#if(${package.ModuleName})/${package.ModuleName}#end/#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end")
@Slf4j
#if(${kotlin})
class ${table.controllerName}#if(${superControllerClass}) : ${superControllerClass}()#end

#else
#if(${superControllerClass})
public class ${table.controllerName} extends ${superControllerClass} {
#else
public class ${table.controllerName} {
#end

    @Autowired
    ${table.serviceName} service;

    /**
    *获取${table.comment}详细信息
     * @param id
     * @return
    */
    @ApiOperation(value = "获取${table.comment}详细信息", notes = "根据url的id来获取${table.comment}详细信息")
    @ApiImplicitParam(name = "id", value = "${table.comment}ID", required = true, dataType = "Long", paramType = "Path")
    @GetMapping("/get${entity}Detail/{id}")
    public GlobalResult<${entity}> get${entity}DetailById(@PathVariable Long id) {
        return new GlobalResult<>(service.selectById(id));
    }

    /**
     *分页获取${table.comment}列表
     * @param query
     * @return
     */
    @ApiOperation(value = "分页获取${table.comment}详细信息，带上查询条件", notes = "根据查询条件分页获取${table.comment}明细")
    @PostMapping("/get${entity}Page")
    public GlobalResult<Page<List<${entity}>>> get${entity}Page(@RequestBody @ApiParam(value = "查询条件json对象", required = true) QueryPage<${entity}> query) {
        Page page = service.selectPage(query.getPage(), new EntityWrapper<>(query.getQueryEntity()));
        return new GlobalResult<>(page);
    }

    /**
    * 新增或者更新${table.comment}信息
     * @param entity
     *@return
    */
    @ApiOperation(value = "新增或者更新${table.comment}信息", notes = "新增或者更新${table.comment}信息")
    @ApiImplicitParam(name = "entity", value = "要保存的json对象", required = true, paramType = "body", dataType = "${entity}")
    @PostMapping("/saveOrUpdate${entity}")
    public GlobalResult saveOrUpdate${entity}(@RequestBody ${entity} entity) {
        service.saveOrUpdate${entity}(entity);
        return GlobalResult.DefaultSuccess();
    }

    /**
     *删除${table.comment}信息
     * @param id
     * @return
     */
    @ApiOperation(value = "删除${table.comment}信息", notes = "根据url的id来删除${table.comment}信息")
    @ApiImplicitParam(name = "id", value = "${table.comment}ID", required = true, dataType = "Long", paramType = "Path")
    @DeleteMapping("/delete${entity}ById/{id}")
    public GlobalResult<Boolean> delete${entity}ById(@PathVariable Long id) {
        return new GlobalResult<>(service.delete${entity}ById(id));
    }
}
#end
