server:
  port: 9001
  servlet:
    context-path: /account

spring:
  application:
    name: template-account

  #bean覆盖
  main:
    allow-bean-definition-overriding: true

  #datasource
  datasource:
    #使用p6spy的驱动和URL前缀，可以支持标准化sql分析监控 com.p6spy.engine.spy.P6SpyDriver
    #测试和生产需换成 com.mysql.jdbc.Driver
    driver-class-name: com.p6spy.engine.spy.P6SpyDriver
    type: com.alibaba.druid.pool.DruidDataSource
    #开发 jdbc:p6spy:mysql://localhost:3306/test_account?useSSL=false&useUnicode=true&allowPublicKeyRetrieval=true&characterEncoding=UTF8&serverTimezone=GMT
    #测试和生产需换成 jdbc:mysql://localhost:3306/test_account?useSSL=false&useUnicode=true&allowPublicKeyRetrieval=true&characterEncoding=UTF8&serverTimezone=GMT
    url: jdbc:p6spy:mysql://localhost:3306/tonytaotao?useSSL=false&useUnicode=true&allowPublicKeyRetrieval=true&characterEncoding=UTF8&serverTimezone=GMT
    username: root
    password: mFj1Manlel8Sn8P+0GOxSfkkRJR8QjhV4J9PTdCSOSKV6Ppgs93p2q+VVelnIxOMP0U63bMp6GRN9mHk4jDl4w==

    #连接池配置
    druid:
      #初始化创建的连接数
      initial-size: 50
      #最大连接数
      max-active: 100
      #最小连接数
      min-idle: 100
      #获取连接时最大等待时间（毫秒）
      max-wait: 1000
      #对支持游标的数据库性能提升巨大，例如oracle,但是使用MySQL时建议关闭
      pool-prepared-statements: false
      #启用pool-prepared-statements时才会设值大于0
      max-pool-prepared-statement-per-connection-size: -1
      #检测连接是否有效的sql
      validation-query: SELECT 1
      #检测连接是否有效的超时时间（秒）
      validation-query-timeout: 1
      #开启会降低性能
      test-on-borrow: false
      #开启会降低性能
      test-on-return: false
      test-while-idle: true
      time-between-eviction-runs-millis: 60000
      min-evictable-idle-time-millis: 30000

      #启用加密，配置公钥
      #加密规则
      #1、命令行输入 java -cp druid-1.1.20.jar com.alibaba.druid.filter.config.ConfigTools xxxxxx
      #2、新建一个类，在main方法中执行 ConfigTools.main(new String[]{"xxxxxx"});
      #结果显示为  privateKey:xxxxxx
      #           publicKey:xxxxxx
      #           password:xxxxxx
      #则在spring.datasource.password填入生成的密码，然后设置config.decrypt=true,configs.decrypt.key=${publicKey}
      connection-properties: config.decrypt=true;config.decrypt.key=MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBALMuuwjKuwegpLFdJ5bPD+/Ou65uppHDM84ZojyDhiIAUBZrJ7NFu7hnNwHK85tf4gnNQ87HMHnX6x7MZLAB7fUCAwEAAQ==

      #关联spring监控，多个用逗号隔开，如果代理的类没有定义interface,则需要设置spring.interceptor.proxy-target-class=true
      aop-patterns: com.tonytaotao.sca.business.service.impl.*

      filter:
        #配置config-开启数据库密码加密
        config:
          enabled: true

        #配置stat-开启监控
        stat:
          enabled: true
          log-slow-sql: true
          slow-sql-millis: 1000
          merge-sql: true
          db-type: mysql

        #配置wall，sql防火墙
        wall:
          enabled: true
          db-type: mysql
          config:
            alter-table-allow: false
            truncate-allow: false
            drop-table-allow: false
            none-base-statement-allow: false
            update-where-none-check: true
            select-into-outfile-allow: false
          #被认为是攻击的sql进行LOG.error输出
          log-violation: true
          #被认为是攻击的sql抛出SQLException
          throw-exception: true

      #配置web-stat-filter
      web-stat-filter:
        enabled: true
        url-pattern: /*
        exclusions: /*.js,/*.gif,*.jpg,/*.png,/*.css,/*.ico,/druid/*
        #知道当前的cookie用户是谁
        principal-cookie-name: admin
        #知道当前的session用户是谁
        principal-session-name: admin
        #监控单个url调用的sql列表
        profile-enable: true
        #session的统计功能
        session-stat-enable: true
        #最大session数
        session-stat-max-count: 100000

      #配置StatViewServlet
      stat-view-servlet:
        enabled: true
        login-username: admin
        login-password: 123456
        url-pattern: /druid/*
        reset-enable: true
        allow: 127.0.0.1

  cloud:
    #sentinel限流
    #sentinel:
      #transport:
        #dashboard: 192.168.56.101:8080
        #port: 8719
      #eager: true

    #nacos注册配置中心
    nacos:
      discovery:
        server-addr: localhost:8848
        group: tonytaotao

#mybatis-plus配置
mybatis-plus:
  #Mapper 所对应的 XML 文件位置，如果在 Mapper 中有自定义方法(XML中有自定义实现)，需要进行该配置，告诉 Mapper 所对应的 XML 文件位置
  mapper-locations: classpath*:/com/tonytaotao/sca/business/mapper/xml/*Mapper.xml
  #数据库实体类所在位置
  type-aliases-package: com.tonytaotao.sca.business.entity
  global-config:
    db-config:
      id-type: auto
      select-strategy: not_null
      insert-strategy: not_null
      update-strategy: not_null
      table-underline: true
      logic-delete-value: 0
      logic-not-delete-value: 1
  configuration:
    map-underscore-to-camel-case: true
    #生产环境需关闭
    log-impl: org.apache.ibatis.logging.slf4j.Slf4jImpl

#日志配置
logging:
  config: classpath:logConfig/log4j2-dev.xml

